// Code generated by roche

package usecase

type Enterprise struct {
	EnterpriseRepo repository.IEnterpriseUsecase
}

func NewEnterpriseUsecase(repo repository.IEnterpriseRepository) EnterpriseUsecase {
	return &EnterpriseUsecase{EnterpriseRepo: repo}
}
func (u EnterpriseUsecase) GetList() ([]*entity.Enterprise, error) {
	entities, err := u.EnterpriseRepo.GetList()
	if err != nil {
		return nil, err
	}
	return entities, err
}
func (u EnterpriseUsecase) GetByID(id int64) (*entity.Enterprise, error) {
	e, err := u.EnterpriseRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	return e, err
}
func (u EnterpriseUsecase) Create(id string, name string, imageUrl string, description string, homepage string) (*entity.Enterprise, error) {
	e := &entity.Enterprise{
		Description: description,
		Homepage:    homepage,
		Id:          id,
		ImageUrl:    imageUrl,
		Name:        name,
	}
	created, err := u.EnterpriseRepo.Create(e)
	if err != nil {
		return nil, err
	}
	return created, err
}
func (u EnterpriseUsecase) Update(id string, name string, imageUrl string, description string, homepage string, id int64) (*entity.Enterprise, error) {
	e, err := u.EnterpriseRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	e = &entity.Enterprise{
		Description: description,
		Homepage:    homepage,
		Id:          id,
		ImageUrl:    imageUrl,
		Name:        name,
	}
	updated, err := u.EnterpriseRepo.Update(id, e)
	if err != nil {
		return nil, err
	}
	return updated, err
}
func (u EnterpriseUsecase) Delete(id int64) error {
	_, err := u.EnterpriseRepo.GetByID(id)
	if err != nil {
		return err
	}
	err = u.EnterpriseRepo.Delete(id)
	if err != nil {
		return err
	}
	return err
}
