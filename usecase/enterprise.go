// Code generated by roche

package usecase

type Enterprise struct {
	EnterpriseRepo repository.IEnterprise
}

func NewEnterpriseUsecase(repo repository.IEnterprise) repository.IEnterprise {
	return &Enterprise{EnterpriseRepo: repo}
}
func (u Enterprise) GetList() ([]*entity.Enterprise, error) {
	usecases, err := u.EnterpriseRepo.GetAll()
	if err != nil {
		return nil, err
	}
	return usecases, err
}
func (u Enterprise) GetByID(id int64) (*entity.Enterprise, error) {
	usecase, err := u.EnterpriseRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	return usecase, err
}
func (u Enterprise) Create(id string, name string, imageUrl string, description string, homepage string) (*entity.Enterprise, error) {
	entity := &entity.Enterprise{
		Description: description,
		Homepage:    homepage,
		Id:          id,
		ImageUrl:    imageUrl,
		Name:        name,
	}
	created, err := u.EnterpriseRepo.Create(entity)
	if err != nil {
		return nil, err
	}
	return created, err
}
func (u Enterprise) Update(id string, name string, imageUrl string, description string, homepage string, id int64) (*entity.Enterprise, error) {
	entity, err := u.EnterpriseRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	entity = &entity.Enterprise{
		Description: description,
		Homepage:    homepage,
		Id:          id,
		ImageUrl:    imageUrl,
		Name:        name,
	}
	updated, err := u.EnterpriseRepo.Update(entity, id)
	if err != nil {
		return nil, err
	}
	return updated, err
}
func (u Enterprise) Delete(id int64) error {
	entity, err := u.EnterpriseRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	err := u.EnterpriseRepo.Delete(entity, id)
	if err != nil {
		return nil, err
	}
	return err
}
