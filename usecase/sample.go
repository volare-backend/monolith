// Code generated by roche

package usecase

import (
	"github.com/volare-backend/monolith/domain/entity"
	"github.com/volare-backend/monolith/domain/repository"
)

type SampleUsecase struct {
	SampleRepo repository.ISampleRepository
}

func NewSampleUsecase(repo repository.ISampleRepository) *SampleUsecase {
	return &SampleUsecase{SampleRepo: repo}
}
func (u SampleUsecase) GetList() ([]*entity.Sample, error) {
	entities, err := u.SampleRepo.GetList()
	if err != nil {
		return nil, err
	}
	return entities, err
}
func (u SampleUsecase) GetByID(id int64) (*entity.Sample, error) {
	e, err := u.SampleRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	return e, err
}
func (u SampleUsecase) Create(hoge string, name string, age int64) (*entity.Sample, error) {
	e := &entity.Sample{
		Age:  age,
		Hoge: hoge,
		Name: name,
	}
	created, err := u.SampleRepo.Create(e)
	if err != nil {
		return nil, err
	}
	return created, err
}
func (u SampleUsecase) Update(hoge string, name string, age int64, id int64) (*entity.Sample, error) {
	e, err := u.SampleRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	e = &entity.Sample{
		Age:  age,
		Hoge: hoge,
		Name: name,
	}
	updated, err := u.SampleRepo.Update(id, e)
	if err != nil {
		return nil, err
	}
	return updated, err
}
func (u SampleUsecase) Delete(id int64) error {
	_, err := u.SampleRepo.GetByID(id)
	if err != nil {
		return err
	}
	err = u.SampleRepo.Delete(id)
	if err != nil {
		return err
	}
	return err
}
