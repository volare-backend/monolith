// Code generated by roche

package repository

type Enterprise struct {
	DB *sql.DB
}

func NewEnterpriseRepository(db *sql.DB) repository.IEnterprise {
	return &EnterpriseUsecase{DB: db}
}
func (r Enterprise) FindAll() ([]*entity.Enterprise, error) {
	var entity entity.Enterprise
	var entities []entity.Enterprise
	rows, err := r.db.Query("SELECT `id`, `name`, `image_url`, `description`, `homepage`, `created_at`, `updated_at` FROM `enterprise`;")
	defer rows.Close()
	if err != nil {
		return nil, err
	}
	for rows.Next() {
		var (
			id          string
			name        string
			image_url   string
			description string
			homepage    string
			id          int64
		)
		err := rows.Scan(&id, &id, &name, &imageUrl, &description, &homepage)
		if err != nil {
			return nil, err
		}
		entity := &entity.Enterprise{
			Description: description,
			Homepage:    homepage,
			Id:          id,
			ImageUrl:    imageUrl,
			Name:        name,
		}
		entities = append(entities, entity)
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return entity, err
}
func (r Enterprise) Find(id int64) (*entity.Enterprise, error) {
	stmt, err := r.db.Prepare("SELECT `id`, `name`, `image_url`, `description`, `homepage`, `created_at`, `updated_at` FROM `enterprise` WHERE `id` = ?;")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()
	var (
		id          string
		name        string
		image_url   string
		description string
		homepage    string
		id          int64
	)
	rows, err := prep.QueryRow(1).Scan(&id, &id, &name, &imageUrl, &description, &homepage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	entity := &entity.Enterprise{
		Description: description,
		Homepage:    homepage,
		Id:          id,
		ImageUrl:    imageUrl,
		Name:        name,
	}
	return entity, err
}
func (u Enterprise) Create(id string, name string, imageUrl string, description string, homepage string) (*entity.Enterprise, error) {
	stmt, err := r.db.Prepare("INSERT INTO `enterprise` (`id`, `name`, `image_url`, `description`, `homepage`) VALUES (?, ?, ?, ?, ?);")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()
	result, err := stmt.Exec(id, name, imageUrl, description, homepage)
	if err != nil {
		return nil, err
	}
	entity := &entity.Enterprise{
		Description: description,
		Homepage:    homepage,
		Id:          id,
		ImageUrl:    imageUrl,
		Name:        name,
	}
	return entity, err
}
func (u Enterprise) Update(id string, name string, imageUrl string, description string, homepage string, id int64) (*entity.Enterprise, error) {
	stmt, err := r.db.Prepare("UPDATE `enterprise` SET  `name` = ? `image_url` = ? `description` = ? `homepage` = ? WHERE `id` = ?;")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()
	result, err := stmt.Exec(id, id, name, imageUrl, description, homepage)
	if err != nil {
		return nil, err
	}
	entity := &entity.Enterprise{
		Description: description,
		Homepage:    homepage,
		Id:          id,
		ImageUrl:    imageUrl,
		Name:        name,
	}
	return entity, err
}
func (u Enterprise) Delete(id int64) error {
	stmt, err := r.db.Prepare("DELETE FROM `enterprise` WHERE `id` = ?;")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()
	result, err := stmt.Exec(id)
	if err != nil {
		return nil, err
	}
	return err
}
