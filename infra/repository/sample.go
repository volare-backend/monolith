// Code generated by roche

package repository

type SampleRepository struct {
	DB *sql.DB
}

func NewSampleRepository(db *sql.DB) repository.ISampleRepository {
	return &SampleRepository{DB: db}
}
func (r SampleRepository) GetList() ([]*entity.Sample, error) {
	var e *entity.Sample
	var entities []*entity.Sample
	rows, err := r.DB.Query("SELECT `hoge`, `name`, `age`, `created_at`, `updated_at` FROM `sample`;")
	defer rows.Close()
	if err != nil {
		return nil, err
	}
	for rows.Next() {
		var (
			hoge string
			name string
			age  int64
			id   int64
		)
		err := rows.Scan(&id, &hoge, &name, &age)
		if err != nil {
			return nil, err
		}
		e := &entity.Sample{
			Age:  age,
			Hoge: hoge,
			Name: name,
		}
		entities = append(entities, e)
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return entities, err
}
func (r SampleRepository) GetByID(id int64) (*entity.Sample, error) {
	stmt, err := r.DB.Prepare("SELECT `hoge`, `name`, `age`, `created_at`, `updated_at` FROM `sample` WHERE `hoge` = ?;")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()
	var (
		hoge string
		name string
		age  int64
		id   int64
	)
	err := stmt.QueryRow(1).Scan(&id, &hoge, &name, &age)
	if err != nil {
		if err == sql.ErrNoRows {
			return &entity.Sample{}, nil
		}
		return nil, err
	}
	e := &entity.Sample{
		Age:  age,
		Hoge: hoge,
		Name: name,
	}
	return e, err
}
func (u SampleRepository) Create(e *entity.Sample) (*entity.Sample, error) {
	stmt, err := r.DB.Prepare("INSERT INTO `sample` (`hoge`, `name`, `age`) VALUES (?, ?, ?);")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()
	_, err = stmt.Exec(e.Hoge, e.Name, e.Age)
	if err != nil {
		return nil, err
	}
	return e, err
}
func (u SampleRepository) Update(id int64, e *entity.Enterprise) (*entity.Sample, error) {
	stmt, err := r.DB.Prepare("UPDATE `sample` SET  `name` = ? `age` = ? WHERE `hoge` = ?;")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()
	_, err = stmt.Exec(id, e.Hoge, e.Name, e.Age)
	if err != nil {
		return nil, err
	}
	return e, err
}
func (u SampleRepository) Delete(id int64) error {
	stmt, err := r.DB.Prepare("DELETE FROM `sample` WHERE `hoge` = ?;")
	if err != nil {
		return err
	}
	defer stmt.Close()
	_, err = stmt.Exec(id)
	if err != nil {
		return err
	}
	return err
}
